---
/**
 * Visor vertical (70% ancho) con pie de foto blanco:
 * - Ancho: clamp(320px, 70vw, 1180px) · Alto: 90vh
 * - Navegación vertical entre fotos de la categoría (scroll-snap)
 * - Pie de foto blanco con título + botones: Like (corazón) y Compartir (flecha)
 * - Likes locales (localStorage) + evento "yoyu:favs-changed" para refrescar la home
 * - Solo abre al pulsar miniatura (no al entrar a categoría)
 */
---
<dialog id="sheetviewer" class="sv" aria-label="Visor de imágenes">
  <div class="sv-backdrop" part="backdrop"></div>

  <div class="sv-sheet" role="document" aria-live="polite">
    <header class="sv-top">
      <button class="sv-close" aria-label="Cerrar" title="Cerrar">×</button>
    </header>

    <div class="sv-reel" tabindex="0" aria-live="polite"></div>
  </div>
</dialog>

<style>
  .sv{ inset:0; border:0; padding:0; background:transparent; }
  .sv[open]{ display:grid; place-items:center; }
  .sv::backdrop{ background:rgba(0,0,0,.65); }
  .sv-backdrop{ position:fixed; inset:0; }

  .sv-sheet{
    position:relative;
    width: clamp(320px, 70vw, 1180px);
    height: 90vh;
    background: rgba(12,14,16,.92);
    backdrop-filter: blur(6px);
    border-radius: 18px;
    outline: 1px solid rgba(255,255,255,.08);
    box-shadow: 0 30px 100px rgba(0,0,0,.5);
    overflow: hidden;
    display:grid; grid-template-rows: auto 1fr;
    touch-action: pan-y;
  }
  .sv-top{
    display:flex; align-items:center; gap:8px; padding:10px;
    background: linear-gradient(180deg, rgba(0,0,0,.35), transparent);
  }
  .sv-close{
    min-width:42px; height:42px; padding:0 12px;
    border-radius:9999px; border:1px solid rgba(255,255,255,.2);
    background:rgba(0,0,0,.35); color:#fff; cursor:pointer;
    display:inline-flex; align-items:center; justify-content:center; backdrop-filter:blur(6px);
  }

  .sv-reel{
    position:relative; height:100%;
    overflow-y:auto; overflow-x:hidden;
    scroll-snap-type: y mandatory;
    -webkit-overflow-scrolling: touch;
    overscroll-behavior-y: contain;
  }

  .sv-slide{
    min-height: calc(90vh - 54px); /* alto total menos cabecera */
    padding: clamp(10px, 2vw, 18px);
    scroll-snap-align: start;
    display:flex; flex-direction:column; align-items:center; gap:12px;
  }

  /* Imagen: en móvil se ajusta al visor; en desktop mostramos original */
  .sv-img{
    display:block; user-select:none; -webkit-user-drag:none;
    transition: transform .25s ease, opacity .25s ease;
    max-width: 100%;
  }
  @media (max-width: 768px){
    .sv-img{ max-height: 64vh; width:auto; height:auto; }
  }
  @media (min-width: 769px){
    .sv-img{ max-height: none; max-width: none; width:auto; height:auto; }
  }

  /* Pie de foto blanco (título + botones) */
  .sv-caption{
    width: min(92%, 980px);
    background: #fff;
    color: #111;
    border-radius: 12px;
    box-shadow: 0 12px 32px rgba(0,0,0,.25);
    display:flex; align-items:center; gap:10px;
    padding: 10px 12px;
  }
  .cap-text{
    min-width: 0; flex:1; font-weight:700;
    white-space: nowrap; overflow:hidden; text-overflow: ellipsis;
  }
  .cap-actions{ display:flex; gap:8px; }

  /* Botones del caption: redondos, blancos con borde sutil y símbolo */
  .cap-btn{
    appearance:none; -webkit-appearance:none;
    background:#fff; color:#111;
    border:1px solid #e5e7eb;
    border-radius: 9999px;
    width:40px; height:40px; padding:0; line-height:0;
    display:grid; place-items:center; cursor:pointer;
  }
  .cap-btn svg{ width:22px; height:22px; display:block; }
  .cap-like.liked svg{ color:#e11d48; fill:#e11d48; } /* corazón rojo cuando está activo */

  /* Evita animación mientras se arrastra */
  .dragging .sv-img{ transition:none; }
</style>

<script is:inline>
  const dialog  = document.getElementById('sheetviewer');
  if (!dialog) { console.warn('[SheetViewer] No se encontró el dialog.'); }
  else {
    const sheet   = dialog.querySelector('.sv-sheet');
    const reel    = dialog.querySelector('.sv-reel');
    const btnClose= dialog.querySelector('.sv-close');

    let items = [];    // [{src, alt, title, slug}]
    let current = 0;
    let activeCat = '';

    const isMobile = () => matchMedia('(max-width: 768px)').matches;

    /* ===== Likes (localStorage) ===== */
    const LS_KEY = 'yoyu_favs';
    const getFavs = () => { try{ return JSON.parse(localStorage.getItem(LS_KEY)||'[]'); }catch{ return []; } };
    const setFavs = (arr) => localStorage.setItem(LS_KEY, JSON.stringify(Array.from(new Set(arr))));
    const isLiked = (slug) => getFavs().includes(slug);
    function toggleLike(slug){
      const favs = new Set(getFavs());
      favs.has(slug) ? favs.delete(slug) : favs.add(slug);
      setFavs([...favs]);
      window.dispatchEvent(new CustomEvent('yoyu:favs-changed'));
    }

    function slideHTML(it, idx){
      const liked = isLiked(it.slug || '');
      const title = it.title || it.alt || '';
      return `
        <section class="sv-slide" data-idx="${idx}" data-slug="${it.slug||''}">
          <img class="sv-img" src="${it.src}" alt="${it.alt || ''}" />
          <div class="sv-caption">
            <div class="cap-text" title="${title.replace(/"/g, '&quot;')}">${title}</div>
            <div class="cap-actions">
              <button class="cap-btn cap-like${liked ? ' liked':''}" type="button" aria-label="Like" title="${liked ? 'Quitar de favoritos':'Añadir a favoritos'}">
                <!-- corazón -->
                <svg viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                  <path d="M12.1 21.35l-1.1-1.02C5.14 14.88 2 12.05 2 8.5 2 6 4 4 6.5 4c1.74 0 3.41.81 4.5 2.09C12.59 4.81 14.26 4 16 4 18.5 4 20.5 6 20.5 8.5c0 3.55-3.14 6.38-8.9 11.83l-.5.47z"/>
                </svg>
              </button>
              <button class="cap-btn cap-share" type="button" aria-label="Compartir" title="Compartir">
                <!-- flecha compartir -->
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
                  <path d="M4 12v7a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-7"/>
                  <path d="M12 16V3"/>
                  <path d="M7 8l5-5 5 5"/>
                </svg>
              </button>
            </div>
          </div>
        </section>
      `;
    }

    function renderSlides(){ reel.innerHTML = items.map(slideHTML).join(''); }

    const headerH = () => (dialog.querySelector('.sv-top')?.clientHeight || 0);
    const slideH  = () => sheet.clientHeight - headerH();
    const slideTop= (idx) => idx * slideH();

    function scrollToIndex(idx, behavior='instant'){
      current = Math.max(0, Math.min(items.length - 1, idx));
      reel.scrollTo({ top: slideTop(current), behavior });
      updateHash();
      syncLikeState();
    }

    function updateCurrentOnScroll(){
      const idx = Math.round(reel.scrollTop / Math.max(1, slideH()));
      if (idx !== current){ current = idx; updateHash(false); syncLikeState(); }
    }

    function syncLikeState(){
      const slide = reel.querySelector(`.sv-slide[data-idx="${current}"]`);
      if (!slide) return;
      const slug = slide.dataset.slug || '';
      const likeBtn = slide.querySelector('.cap-like');
      likeBtn?.classList.toggle('liked', isLiked(slug));
      likeBtn?.setAttribute('title', isLiked(slug) ? 'Quitar de favoritos' : 'Añadir a favoritos');
    }

    function openFromTrigger(btn){
      // obtiene toda la categoría desde el panel actual
      const panel = btn.closest('.panel');
      if (panel?.dataset.items) {
        try { items = JSON.parse(panel.dataset.items); } catch { items = []; }
        activeCat = panel.dataset.cat || '';
      } else {
        items = [{ src: btn.dataset.src, alt: btn.dataset.alt || '', title: btn.dataset.title || '', slug: btn.dataset.slug || '' }];
        activeCat = document.querySelector('.tab.is-active')?.dataset.tab || '';
      }
      if (!items.length) return;

      const startIdx = Number(btn.dataset.idx ?? 0);
      renderSlides();

      if ('showModal' in dialog) dialog.showModal(); else dialog.setAttribute('open','');
      document.documentElement.style.overflow = 'hidden';
      requestAnimationFrame(() => scrollToIndex(startIdx, 'instant'));
    }

    async function shareCurrent(){
      const it = items[current] || {};
      const slugOrIdx = it.slug || String(current);
      const url = new URL(location.href);
      url.hash = `${activeCat}:${slugOrIdx}`;
      const shareUrl = url.toString();
      try{
        if (navigator.share){
          await navigator.share({ title: it.title || 'Foto', url: shareUrl });
        } else {
          await navigator.clipboard.writeText(shareUrl);
          alert('Enlace copiado al portapapeles');
        }
      }catch{}
    }

    function close(){
      if (dialog.open && 'close' in dialog) dialog.close();
      dialog.removeAttribute('open');
      document.documentElement.style.overflow = '';
    }

    function updateHash(push = true){
      if (!activeCat) return;
      const it = items[current] || {};
      const slugOrIdx = it.slug || String(current);
      const newHash = `${activeCat}:${slugOrIdx}`;
      if (push) history.replaceState(null, '', '#' + newHash);
      else if (location.hash.replace('#','') !== newHash) history.replaceState(null, '', '#' + newHash);
    }

    /* Delegaciones globales */
    document.addEventListener('click', (e) => {
      const btn = e.target.closest('.lb-trigger'); if (!btn) return;
      e.preventDefault(); openFromTrigger(btn);
    });
    // Acciones del pie de foto
    reel.addEventListener('click', (e) => {
      const slide = e.target.closest('.sv-slide'); if (!slide) return;
      const slug = slide.dataset.slug || '';
      if (e.target.closest('.cap-like')){ toggleLike(slug); syncLikeState(); return; }
      if (e.target.closest('.cap-share')){ shareCurrent(); return; }
    });

    reel.addEventListener('scroll', updateCurrentOnScroll, { passive:true });

    btnClose?.addEventListener('click', close);
    dialog.addEventListener('click', (e) => {
      const r = sheet.getBoundingClientRect();
      const inside = e.clientX >= r.left && e.clientX <= r.right && e.clientY <= r.bottom && e.clientY >= r.top;
      if (!inside) close();
    });
    document.addEventListener('keydown', (e) => {
      if (!dialog.open) return;
      if (e.key === 'Escape') close();
      if (e.key === 'ArrowDown') { e.preventDefault(); reel.scrollBy({ top: sheet.clientHeight, behavior:'smooth' }); }
      if (e.key === 'ArrowUp')   { e.preventDefault(); reel.scrollBy({ top:-sheet.clientHeight, behavior:'smooth' }); }
      if (e.key.toLowerCase() === 's') shareCurrent();
    });

    // Importante: ya NO abrimos el visor solo con #cat; solo con #cat:slug|idx
    function openFromHash(){
      const h = location.hash.replace('#',''); if (!h || !h.includes(':')) return;
      const [cat, rest] = h.split(':'); if (!cat || !rest) return;
      const panel = document.getElementById('panel-' + cat);
      if (!panel || !panel.dataset.items) return;
      activeCat = cat;
      try { items = JSON.parse(panel.dataset.items); } catch { items = []; }
      if (!items.length) return;

      const idx = items.findIndex(x => x.slug && rest && x.slug === rest);
      const startIdx = idx >= 0 ? idx : Math.max(0, parseInt(rest, 10) || 0);

      renderSlides();
      if ('showModal' in dialog) dialog.showModal(); else dialog.setAttribute('open','');
      document.documentElement.style.overflow = 'hidden';
      requestAnimationFrame(() => scrollToIndex(startIdx, 'instant'));
    }
    window.addEventListener('load', openFromHash);

    dialog.addEventListener('close', () => { document.documentElement.style.overflow=''; });

    console.info('[SheetViewer 70% + caption blanco + like/share] listo ✓');
  }
</script>
