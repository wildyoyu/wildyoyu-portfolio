---
/**
 * YLB = Yoyu LightBox
 * - Ancho: clamp(320px, 70vw, 1180px), alto 90vh
 * - Scroll vertical por categoría
 * - PIE BLANCO tipo Instagram con título + Like ❤️ + Compartir ↗
 * - Abre en la FOTO QUE TOCAS (usa data-idx y scrollIntoView)
 * - Likes en localStorage + evento "yoyu:favs-changed"
 * - Solo abre si hay miniatura o hash #cat:slug|idx (no con #cat solo)
 */
---
<dialog id="ylb" class="ylb" aria-label="Visor de imágenes">
  <div class="ylb__backdrop" part="backdrop"></div>

  <div class="ylb__sheet" role="document" aria-live="polite">
    <header class="ylb__top">
      <button class="ylb__close" aria-label="Cerrar" title="Cerrar">×</button>
    </header>

    <div class="ylb__reel" tabindex="0" aria-live="polite"></div>
  </div>
</dialog>

<style>
  .ylb { inset:0; border:0; padding:0; background:transparent; }
  .ylb[open]{ display:grid; place-items:center; }
  .ylb::backdrop{ background:rgba(0,0,0,.65); }
  .ylb__backdrop{ position:fixed; inset:0; }

  .ylb__sheet{
    position:relative;
    width: clamp(320px, 70vw, 1180px);
    height: 90vh;
    background: rgba(12,14,16,.92);
    backdrop-filter: blur(6px);
    border-radius: 18px;
    outline: 1px solid rgba(255,255,255,.08);
    box-shadow: 0 30px 100px rgba(0,0,0,.5);
    overflow: hidden;
    display:grid; grid-template-rows: auto 1fr;
    touch-action: pan-y;
  }

  .ylb__top{
    display:flex; align-items:center; gap:8px; padding:10px;
    background: linear-gradient(180deg, rgba(0,0,0,.35), transparent);
  }
  .ylb__close{
    all: unset;
    width:42px; height:42px; border-radius:9999px;
    display:grid; place-items:center; cursor:pointer;
    color:#fff; background:rgba(0,0,0,.35); border:1px solid rgba(255,255,255,.25);
    backdrop-filter: blur(6px);
  }

  .ylb__reel{
    height:100%;
    overflow-y:auto; overflow-x:hidden;
    scroll-snap-type: y mandatory;
    -webkit-overflow-scrolling: touch;
    overscroll-behavior-y: contain;
  }

  .ylb__slide{
    min-height: calc(90vh - 54px);
    padding: clamp(10px, 2vw, 18px);
    scroll-snap-align: start;
    display:flex; flex-direction:column; align-items:center; gap:12px;
  }

  .ylb__figure{
    width: min(92%, 980px);
    display:flex; flex-direction:column; align-items:center; gap:12px;
    max-height: calc(90vh - 54px - 20px);
    overflow:auto;
  }

  .ylb__img{ display:block; user-select:none; -webkit-user-drag:none; max-width:100%; }
  @media (max-width:768px){ .ylb__img{ max-height:64vh; height:auto; } }

  /* PIE BLANCO tipo Instagram */
  .ylb__caption{
    position: sticky; bottom: 0;
    width: 100%;
    background:#fff; color:#111;
    border-radius:12px; box-shadow:0 12px 32px rgba(0,0,0,.25);
    display:flex; align-items:center; gap:10px;
    padding:10px 12px; z-index:5;
  }
  .ylb__captext{
    min-width:0; flex:1; font-weight:700;
    white-space:nowrap; overflow:hidden; text-overflow:ellipsis;
  }
  .ylb__actions{ display:flex; gap:8px; }

  /* Botones redondos robustos (neutralizan estilos globales) */
  .ylb__btn{
    all: unset; box-sizing: border-box;
    width:40px; height:40px; border-radius:9999px !important;
    background:#fff !important; color:#111 !important;
    border:1px solid #e5e7eb !important;
    display:grid; place-items:center; cursor:pointer;
  }
  .ylb__btn svg{ width:22px; height:22px; display:block; }
  .ylb__btn--like.liked{ color:#e11d48 !important; }
  .ylb__btn--like.liked svg{ fill: currentColor; }
</style>

<script is:inline>
  const dlg   = document.getElementById('ylb');
  if (!dlg) { console.warn('[YLB] No se encontró el dialog'); }
  else {
    const reel  = dlg.querySelector('.ylb__reel');
    const close = dlg.querySelector('.ylb__close');

    let items = [];    // [{src, alt, title, slug}]
    let current = 0;
    let activeCat = '';

    /* ===== Likes (localStorage) ===== */
    const LS_KEY = 'yoyu_favs';
    const getFavs = () => { try{ return JSON.parse(localStorage.getItem(LS_KEY)||'[]'); }catch{ return []; } };
    const setFavs = (arr) => localStorage.setItem(LS_KEY, JSON.stringify(Array.from(new Set(arr))));
    const isLiked = (slug) => getFavs().includes(slug);
    function toggleLike(slug){
      const favs = new Set(getFavs());
      favs.has(slug) ? favs.delete(slug) : favs.add(slug);
      setFavs([...favs]);
      window.dispatchEvent(new CustomEvent('yoyu:favs-changed'));
    }

    function slideHTML(it, idx){
      const liked = isLiked(it.slug || '');
      const title = it.title || it.alt || '';
      return `
        <section class="ylb__slide" data-idx="${idx}" data-slug="${it.slug||''}">
          <div class="ylb__figure">
            <img class="ylb__img" src="${it.src}" alt="${it.alt||''}" />
            <div class="ylb__caption">
              <div class="ylb__captext" title="${title.replace(/"/g,'&quot;')}">${title}</div>
              <div class="ylb__actions">
                <button class="ylb__btn ylb__btn--like${liked?' liked':''}" type="button" aria-label="Like" title="${liked?'Quitar de favoritos':'Añadir a favoritos'}">
                  <svg viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M12.1 21.35l-1.1-1.02C5.14 14.88 2 12.05 2 8.5 2 6 4 4 6.5 4c1.74 0 3.41.81 4.5 2.09C12.59 4.81 14.26 4 16 4 18.5 4 20.5 6 20.5 8.5c0 3.55-3.14 6.38-8.9 11.83l-.5.47z" fill="currentColor"/>
                  </svg>
                </button>
                <button class="ylb__btn ylb__btn--share" type="button" aria-label="Compartir" title="Compartir">
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
                    <path d="M4 12v7a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-7"/>
                    <path d="M12 16V3"/>
                    <path d="M7 8l5-5 5 5"/>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </section>
      `;
    }

    function renderSlides(){ reel.innerHTML = items.map(slideHTML).join(''); }

    function scrollToIdx(idx, behavior='auto'){
      current = Math.max(0, Math.min(items.length-1, Number(idx)||0));
      const slide = reel.querySelector(`.ylb__slide[data-idx="${current}"]`);
      if (slide) slide.scrollIntoView({ behavior, block: 'start' });
      updateHash();
      syncLikeState();
    }

    function syncLikeState(){
      const slide = reel.querySelector(`.ylb__slide[data-idx="${current}"]`);
      if (!slide) return;
      const slug = slide.dataset.slug || '';
      const likeBtn = slide.querySelector('.ylb__btn--like');
      likeBtn?.classList.toggle('liked', isLiked(slug));
      likeBtn?.setAttribute('title', isLiked(slug) ? 'Quitar de favoritos' : 'Añadir a favoritos');
    }

    function openFromTrigger(btn){
      // Lee toda la categoría del panel
      const panel = btn.closest('.panel');
      if (panel?.dataset.items) {
        try { items = JSON.parse(panel.dataset.items); } catch { items = []; }
        activeCat = panel.dataset.cat || '';
      } else {
        items = [{ src: btn.dataset.src, alt: btn.dataset.alt||'', title: btn.dataset.title||'', slug: btn.dataset.slug||'' }];
        activeCat = document.querySelector('.tab.is-active')?.dataset.tab || '';
      }
      if (!items.length) return;

      const startIdx = Number(btn.dataset.idx ?? 0);
      renderSlides();

      if ('showModal' in dlg) dlg.showModal(); else dlg.setAttribute('open','');
      document.documentElement.style.overflow = 'hidden';

      // MUY IMPORTANTE: abrir en la foto pulsada
      requestAnimationFrame(() => scrollToIdx(startIdx, 'auto'));
    }

    async function shareCurrent(){
      const it = items[current] || {};
      const slugOrIdx = it.slug || String(current);
      const url = new URL(location.href);
      url.hash = `${activeCat}:${slugOrIdx}`;
      const shareUrl = url.toString();
      try{
        if (navigator.share){
          await navigator.share({ title: it.title || 'Foto', url: shareUrl });
        } else {
          await navigator.clipboard.writeText(shareUrl);
          alert('Enlace copiado al portapapeles');
        }
      }catch{}
    }

    function updateHash(push=true){
      if (!activeCat) return;
      const it = items[current] || {};
      const slugOrIdx = it.slug || String(current);
      const newHash = `${activeCat}:${slugOrIdx}`;
      if (push) history.replaceState(null, '', '#'+newHash);
    }

    // Delegación
    document.addEventListener('click', (e) => {
      const btn = e.target.closest('.lb-trigger'); if (!btn) return;
      e.preventDefault(); openFromTrigger(btn);
    });

    // Acciones del pie
    reel.addEventListener('click', (e) => {
      const slide = e.target.closest('.ylb__slide'); if (!slide) return;
      const slug = slide.dataset.slug || '';
      if (e.target.closest('.ylb__btn--like')){ toggleLike(slug); syncLikeState(); }
      if (e.target.closest('.ylb__btn--share')){ e.preventDefault(); shareCurrent(); }
    });

    // Cerrar
    close?.addEventListener('click', () => { dlg.close?.(); dlg.removeAttribute('open'); document.documentElement.style.overflow=''; });
    dlg.addEventListener('click', (e) => {
      const r = dlg.querySelector('.ylb__sheet').getBoundingClientRect();
      const inside = e.clientX >= r.left && e.clientX <= r.right && e.clientY <= r.bottom && e.clientY >= r.top;
      if (!inside) { dlg.close?.(); dlg.removeAttribute('open'); document.documentElement.style.overflow=''; }
    });

    // Abrir directo por hash SOLO si hay slug/idx (no #cat)
    function openFromHash(){
      const h = location.hash.replace('#',''); if (!h || !h.includes(':')) return;
      const [cat, rest] = h.split(':'); if (!cat || !rest) return;
      const panel = document.getElementById('panel-'+cat);
      if (!panel || !panel.dataset.items) return;
      activeCat = cat;
      try{ items = JSON.parse(panel.dataset.items); }catch{ items = []; }
      if (!items.length) return;

      renderSlides();
      if ('showModal' in dlg) dlg.showModal(); else dlg.setAttribute('open','');
      document.documentElement.style.overflow = 'hidden';

      const idx = items.findIndex(x => x.slug && rest && x.slug === rest);
      const start = idx >= 0 ? idx : Math.max(0, parseInt(rest,10) || 0);
      requestAnimationFrame(() => scrollToIdx(start, 'auto'));
    }
    window.addEventListener('load', openFromHash);

    console.info('[YLB listo ✓]');
  }
</script>
