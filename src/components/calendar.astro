---
import { astroEvents } from '../data/events';

const now = new Date();
const year = now.getFullYear();
const month = now.getMonth() + 1;
---
<section class="section" id="calendar">
  <div class="container">
    <h2 class="h2" style="margin-bottom:.6rem;">Calendario astron√≥mico</h2>

    <div class="cal card" id="cal-root"
         data-year={year} data-month={month}
         data-events={JSON.stringify(astroEvents)}>
      <header class="cal__hdr">
        <div class="cal__title"></div>
        <div class="cal__nav">
          <button class="btn cal__btn" data-nav="-1" aria-label="Mes anterior">‚Äπ</button>
          <button class="btn cal__btn" data-nav="+1" aria-label="Mes siguiente">‚Ä∫</button>
        </div>
      </header>

      <div class="cal__grid">
        <!-- cabecera de d√≠as -->
        <div class="cal__dow">L</div><div class="cal__dow">M</div><div class="cal__dow">X</div>
        <div class="cal__dow">J</div><div class="cal__dow">V</div><div class="cal__dow">S</div><div class="cal__dow">D</div>
        <!-- las celdas van por JS -->
      </div>

      <!-- LEYENDA con EMOJI -->
      <div class="cal__legend" style="margin-top:6px">
        <span class="pill"><span class="emo">üåô</span> Luna</span>
        <span class="pill"><span class="emo">‚òÑÔ∏è</span> Lluvia</span>
        <span class="pill"><span class="emo">ü™ê</span> Planeta</span>
        <span class="pill"><span class="emo">üåí</span> Eclipse</span>
        <span class="pill"><span class="emo">‚ú¶</span> Otro</span>
      </div>

      <div class="cal__list">
        <h3 class="h2" style="font-size:18px; margin:.8rem 0 .4rem">Pr√≥ximos</h3>
        <ul class="cal__upcoming"></ul>
      </div>
    </div>
  </div>

  <style>
    .cal{display:grid; gap:12px}

    .cal__hdr{display:flex; align-items:center; justify-content:space-between}
    .cal__title{text-transform:capitalize; font-weight:900}

    /* Contenedor del calendario con borde exterior */
    .cal__grid{
      display:grid; grid-template-columns:repeat(7,1fr);
      border:1px solid var(--card-b, rgba(255,255,255,.16));
      border-radius:12px; overflow:hidden;
      background: transparent;
    }

    /* Cabecera DOW */
    .cal__dow{
      min-height:40px; display:grid; place-items:center;
      font-weight:800; background:transparent;
      /* sin outline arriba para no duplicar con el borde del contenedor */
      outline: none;
    }

    /* Celdas del mes: TODAS las divisorias con outline interno */
    .cal__cell{
      min-height:64px; display:grid; align-content:start; padding:8px 10px; background:transparent;
      border:0;                                   /* anulamos borders previos */
      outline: 1px solid rgba(255,255,255,.16);   /* l√≠nea visible SIEMPRE */
      outline-offset: -1px;                       /* pegada al borde */
    }
    .cal__cell.is-empty{ background:linear-gradient(180deg, rgba(255,255,255,.03), transparent) }

    .cal__num{ font-weight:900; opacity:.95 }
    .cal__events{ display:flex; gap:6px; margin-top:auto; align-items:flex-end; min-height:20px; flex-wrap:wrap }

    /* Evento dentro de la celda (emoji dentro de una p√≠ldora sutil) */
    .cal__e{
      display:inline-flex; align-items:center; justify-content:center;
      width:20px; height:20px; border-radius:999px;
      background: rgba(255,255,255,.06);
      border:1px solid var(--card-b, rgba(255,255,255,.16));
      font-size:12px; line-height:1;
    }

    /* Leyenda como chips con emoji */
    .cal__legend{display:flex; flex-wrap:wrap; gap:10px; opacity:.95; font-size:14px}
    .cal__legend .pill{
      display:inline-flex; align-items:center; gap:8px;
      padding:4px 10px; border-radius:999px;
      background: rgba(255,255,255,.04);
      border:1px solid var(--card-b, rgba(255,255,255,.16));
    }
    .emo{ font-size:14px; line-height:1 }
    
    .cal__list ul{margin:0; padding-left:18px}
  </style>

  <script is:inline>
    const ROOT = document.getElementById('cal-root');
    const GRID = ROOT.querySelector('.cal__grid');
    const TITLE = ROOT.querySelector('.cal__title');
    const UPC = ROOT.querySelector('.cal__upcoming');
    const EVS = (() => { try { return JSON.parse(ROOT.dataset.events || '[]'); } catch { return []; } })();

    const TYPE_EMOJI = { luna:'üåô', lluvia:'‚òÑÔ∏è', planeta:'ü™ê', eclipse:'üåí', otro:'‚ú¶' };

    const monthMatrix = (y,m) => {
      const first = new Date(y, m-1, 1);
      const start = (first.getDay() + 6) % 7; // Lunes=0
      const days  = new Date(y, m, 0).getDate();
      const cells = [];
      for(let i=0;i<start;i++) cells.push({d:null});
      for(let d=1; d<=days; d++){
        const iso = `${y}-${String(m).padStart(2,'0')}-${String(d).padStart(2,'0')}`;
        cells.push({d, iso});
      }
      while(cells.length % 7) cells.push({d:null});
      return cells;
    };

    function renderCalendar(y,m){
      ROOT.dataset.year=y; ROOT.dataset.month=m;
      TITLE.textContent = new Date(y, m-1, 1).toLocaleString('es-ES',{month:'long', year:'numeric'});

      // elimina celdas anteriores (dejamos los 7 .cal__dow)
      GRID.querySelectorAll('.cal__cell').forEach(n=>n.remove());

      const byDay = new Map();
      EVS.forEach(ev => { const key = ev.date; const arr = byDay.get(key)||[]; arr.push(ev); byDay.set(key, arr); });

      const frag = document.createDocumentFragment();
      for (const cell of monthMatrix(y,m)){
        const div = document.createElement('div');
        div.className = 'cal__cell' + (cell.d ? '' : ' is-empty');

        if (cell.d){
          const num=document.createElement('div'); num.className='cal__num'; num.textContent=String(cell.d);
          const evs=document.createElement('div'); evs.className='cal__events';
          (byDay.get(cell.iso)||[]).forEach(ev=>{
            const e=document.createElement('span');
            e.className='cal__e';
            e.textContent = TYPE_EMOJI[ev.type||'otro'];
            e.title = ev.title;
            evs.appendChild(e);
          });
          div.appendChild(num); div.appendChild(evs);
        }
        frag.appendChild(div);
      }
      GRID.appendChild(frag);

      const today = new Date(new Date().toDateString());
      UPC.innerHTML = EVS.filter(ev => new Date(ev.date) >= today)
        .sort((a,b)=> new Date(a.date) - new Date(b.date))
        .slice(0,8)
        .map(ev => `<li><strong>${new Date(ev.date).toLocaleDateString('es-ES',{day:'2-digit',month:'short'})}</strong> ‚Äî ${ev.title}</li>`)
        .join('');
    }

    ROOT.querySelectorAll('.cal__btn').forEach(btn => {
      btn.addEventListener('click', () => {
        let y = Number(ROOT.dataset.year), m = Number(ROOT.dataset.month);
        m += Number(btn.dataset.nav); if (m<1){m=12;y--} if (m>12){m=1;y++}
        renderCalendar(y,m);
      });
    });

    renderCalendar(Number(ROOT.dataset.year), Number(ROOT.dataset.month));
  </script>
</section>
