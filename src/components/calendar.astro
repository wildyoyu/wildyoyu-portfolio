---
import { astroEvents } from '../data/events';

const now = new Date();
const year = now.getFullYear();
const month = now.getMonth() + 1;
---
<section class="section" id="calendar">
  <div class="container">
    <h2 class="h2" style="margin-bottom:.6rem;">Calendario astron√≥mico</h2>

    <div class="cal" id="cal-root"
         data-year={year} data-month={month}
         data-events={JSON.stringify(astroEvents)}>
      <header class="cal__hdr">
        <div class="cal__title"></div>
        <div class="cal__nav">
          <button class="btn cal__btn" data-nav="-1" aria-label="Mes anterior">‚Äπ</button>
          <button class="btn cal__btn" data-nav="+1" aria-label="Mes siguiente">‚Ä∫</button>
        </div>
      </header>

      <div class="cal__grid">
        <div class="cal__dow">L</div><div class="cal__dow">M</div><div class="cal__dow">X</div>
        <div class="cal__dow">J</div><div class="cal__dow">V</div><div class="cal__dow">S</div><div class="cal__dow">D</div>
        <!-- celdas por JS -->
      </div>

      <!-- Leyenda con Luna llena y Superluna diferenciadas -->
      <div class="cal__legend" style="margin-top:6px">
        <span class="pill"><span class="emo">üåï</span> Luna llena</span>
        <span class="pill"><span class="emo">üåï‚ú®</span> Superluna</span>
        <span class="pill"><span class="emo">‚òÑÔ∏è</span> Lluvia</span>
        <span class="pill"><span class="emo">ü™ê</span> Planeta</span>
        <span class="pill"><span class="emo">üåí</span> Eclipse</span>
        <span class="pill"><span class="emo">‚ú¶</span> Otro</span>
      </div>

      <div class="cal__list">
        <h3 class="h2" style="font-size:18px; margin:.8rem 0 .4rem">Pr√≥ximos</h3>
        <ul class="cal__upcoming"></ul>
      </div>
    </div>
  </div>

  <style>
    /* anchura contenida */
    .cal{
      max-width: min(92vw, 920px);
      margin-inline: auto;
      display:grid; gap:12px;
    }

    .cal__hdr{display:flex; align-items:center; justify-content:space-between}
    .cal__title{text-transform:capitalize; font-weight:900}

    /* Ret√≠cula por gradiente (anti-alias robusto) */
    .cal__grid{
      --row-h: 66px;
      --line: rgba(255,255,255,.28);
      --rows: 7; /* la actualiza JS */
      display:grid;
      grid-template-columns: repeat(7, 1fr);
      grid-auto-rows: var(--row-h);
      border-radius:12px; overflow:hidden;
      border:1px solid var(--line);
      background-image:
        linear-gradient(to right, var(--line) 1px, transparent 1px),
        linear-gradient(to bottom, var(--line) 1px, transparent 1px);
      background-size:
        calc(100%/7) 100%,
        100% calc(100%/var(--rows));
      background-position: 0 0, 0 0;
      background-repeat: repeat;
    }

    .cal__dow{
      display:grid; place-items:center;
      font-weight:800; background:transparent;
    }

    .cal__cell{
      position:relative;
      display:grid; place-items:center; /* centra el emoji */
      background:transparent;
    }
    .cal__cell.is-empty{ background:linear-gradient(180deg, rgba(255,255,255,.03), transparent) }

    /* N√∫mero del d√≠a: verticalmente centrado a la izquierda */
    .cal__num{
      position:absolute; left:8px; top:50%;
      transform: translateY(-50%);
      font-weight:900; opacity:.95; pointer-events:none;
    }

    /* Badge del emoji centrado */
    .cal__e{
      display:inline-grid; place-items:center;
      min-width:26px; height:26px; padding:0 4px;
      border-radius:999px;
      background: rgba(255,255,255,.06);
      border:1px solid rgba(255,255,255,.22);
      font-size:15px; line-height:1;
      white-space:nowrap; /* para "üåï‚ú®" que son dos s√≠mbolos */
    }

    /* Leyenda */
    .cal__legend{display:flex; flex-wrap:wrap; gap:10px; opacity:.95; font-size:14px}
    .cal__legend .pill{
      display:inline-flex; align-items:center; gap:8px;
      padding:4px 10px; border-radius:999px;
      background: rgba(255,255,255,.04);
      border:1px solid rgba(255,255,255,.18);
    }
    .emo{ font-size:14px; line-height:1 }

    .cal__list ul{margin:0; padding-left:18px}
  </style>

  <script is:inline>
    const ROOT = document.getElementById('cal-root');
    const GRID = ROOT.querySelector('.cal__grid');
    const TITLE = ROOT.querySelector('.cal__title');
    const UPC = ROOT.querySelector('.cal__upcoming');
    const EVS = (() => { try { return JSON.parse(ROOT.dataset.events || '[]'); } catch { return []; } })();

    // Emoji por tipo y caso especial superluna
    const TYPE_EMOJI = { luna:'üåï', lluvia:'‚òÑÔ∏è', planeta:'ü™ê', eclipse:'üåí', otro:'‚ú¶' };
    function emojiFor(ev){
      if ((ev.type||'') === 'luna') return ev.super || /superluna/i.test(ev.title) ? 'üåï‚ú®' : 'üåï';
      return TYPE_EMOJI[ev.type||'otro'] || '‚ú¶';
    }

    // Prioridad para elegir icono si hay varios eventos el mismo d√≠a
    const PRIORITY = ['luna-super', 'luna', 'eclipse', 'lluvia', 'planeta', 'otro'];
    function pickEmoji(list){
      if (!list.length) return null;
      // etiqueta interna para ordenar
      const tag = (ev) => (ev.type==='luna' && (ev.super || /superluna/i.test(ev.title))) ? 'luna-super' : (ev.type || 'otro');
      const chosen = list.slice().sort((a,b)=> PRIORITY.indexOf(tag(a)) - PRIORITY.indexOf(tag(b)) )[0];
      return { char: emojiFor(chosen), title: list.map(e=>e.title).join(' ‚Ä¢ ') };
    }

    const monthMatrix = (y,m) => {
      const first = new Date(y, m-1, 1);
      const start = (first.getDay() + 6) % 7; // lunes=0
      const days  = new Date(y, m, 0).getDate();
      const cells = [];
      for(let i=0;i<start;i++) cells.push({d:null});
      for(let d=1; d<=days; d++){
        const iso = `${y}-${String(m).padStart(2,'0')}-${String(d).padStart(2,'0')}`;
        cells.push({d, iso});
      }
      while(cells.length % 7) cells.push({d:null});
      return cells;
    };

    function renderCalendar(y,m){
      ROOT.dataset.year=y; ROOT.dataset.month=m;
      TITLE.textContent = new Date(y, m-1, 1).toLocaleString('es-ES',{month:'long', year:'numeric'});

      // limpia celdas (dejamos los 7 .cal__dow)
      GRID.querySelectorAll('.cal__cell').forEach(n=>n.remove());

      const cells = monthMatrix(y,m);
      const rows = 1 + Math.ceil(cells.length / 7);  // +1 cabecera
      GRID.style.setProperty('--rows', rows);

      const byDay = new Map();
      EVS.forEach(ev => { const key = ev.date; const arr = byDay.get(key)||[]; arr.push(ev); byDay.set(key, arr); });

      const frag = document.createDocumentFragment();
      for (const cell of cells){
        const div = document.createElement('div');
        div.className = 'cal__cell' + (cell.d ? '' : ' is-empty');

        if (cell.d){
          const num=document.createElement('div'); num.className='cal__num'; num.textContent=String(cell.d);
          div.appendChild(num);

          const events = byDay.get(cell.iso)||[];
          const em = pickEmoji(events);
          if (em){
            const e=document.createElement('span');
            e.className='cal__e';
            e.textContent = em.char;      // "üåï" o "üåï‚ú®"
            e.title = em.title;           // tooltip con todos los eventos del d√≠a
            div.appendChild(e);
          }
        }
        frag.appendChild(div);
      }
      GRID.appendChild(frag);

      const today = new Date(new Date().toDateString());
      UPC.innerHTML = EVS
        .filter(ev => new Date(ev.date) >= today)
        .sort((a,b)=> new Date(a.date) - new Date(b.date))
        .slice(0,8)
        .map(ev => `<li><strong>${new Date(ev.date).toLocaleDateString('es-ES',{day:'2-digit',month:'short'})}</strong> ‚Äî ${ev.title}</li>`)
        .join('');
    }

    ROOT.querySelectorAll('.cal__btn').forEach(btn => {
      btn.addEventListener('click', () => {
        let y = Number(ROOT.dataset.year), m = Number(ROOT.dataset.month);
        m += Number(btn.dataset.nav); if (m<1){m=12;y--} if (m>12){m=1;y++}
        renderCalendar(y,m);
      });
    });

    renderCalendar(Number(ROOT.dataset.year), Number(ROOT.dataset.month));
  </script>
</section>
